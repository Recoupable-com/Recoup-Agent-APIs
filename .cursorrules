# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:

```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:

```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:

```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:

```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:

- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.

```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.

```
venv/bin/python ./tools/search_engine.py "your search keywords"
```

This will output the search results in the following format:

```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```

If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When using TurboFactory from @ardrive/turbo-sdk, the fileStreamFactory must return a Web API compatible ReadableStream from node:stream/web, not Node.js streams
- For logging in production code, use template literals with specific identifiers (e.g. handle, artistId) to make debugging easier
- When handling image uploads, implement proper fallback mechanisms and clear error messages

# Scratchpad

## Current Task: P1: Agent API - New Route /api/generate_segments

### Task Description

Create a new API route to automate segment generation for artists based on their social data.

### Requirements

1. Endpoint:

   - Route: /api/generate_segments
   - Method: POST
   - Parameters: accountId (artist identifier)
   - Response: Success status or error message

2. Data Flow:

   - account_socials (table) → social_posts (table) → post_comments (table) → generate_segments (function)

3. Core Logic Steps:
   [X] Fetch account_socials records for accountId
   [X] For each account_social: - Retrieve associated social posts - Fetch post_comments for each post
   [X] Aggregate comments into required format
   [X] Call generate_segments function
   [X] Return results/status

### Research Plan

[X] Database Schema Analysis

Database Tables Structure:

1. account_socials:

   - Columns: id, account_id, social_id
   - Relations: accounts (account_id), socials (social_id)

2. social_posts:

   - Columns: id, post_id, social_id, updated_at
   - Relations: posts (post_id), socials (social_id)

3. post_comments:

   - Columns: id, comment, commented_at, post_id, social_id
   - Relations: posts (post_id), socials (social_id)

4. artist_fan_segment:
   - Columns: id, artist_social_id, fan_social_id, segment_name, updated_at
   - Relations: socials (artist_social_id, fan_social_id)

[X] API Infrastructure Review

1. Route Pattern:

   - Express.js router in routes.ts
   - Controllers organized by domain (GlobalController, SegmentsController)
   - Standard error handling with try/catch and status codes
   - Response format: { success: true/false, data/error }

2. Existing Components:
   - generateSegments function already implemented
   - Supabase client for database operations
   - Error handling patterns established

[X] Integration Points

1. generate_segments Function:

   - Already implemented in lib/generateSegments.ts
   - Takes array of comments with fan_social_id and artist_social_id
   - Returns array of segment IDs

2. Authentication:
   - No special auth requirements found in similar endpoints
   - Standard error handling should be sufficient

### Implementation Progress

[X] Database Query Design

- Implemented efficient queries with proper joins
- Added error handling for each database operation
- Using IN clauses for batch operations

[X] Route Implementation

- Created route handler in SegmentsController
- Implemented data flow logic with proper error handling
- Added route to routes.ts
- Added logging for debugging

[ ] Fix Type Issues

- Need to fix PostComment interface and type casting
- Ensure proper typing for Supabase query responses

[ ] Testing Strategy

- Unit tests for data retrieval
- Integration tests for full flow
- Error case testing
- Performance testing if needed

### Notes

- Need to consider performance implications of fetching all social data
- May need pagination or batching for large datasets
- Should add proper logging for monitoring and debugging
- Consider rate limiting for the API endpoint
