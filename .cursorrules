# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:

```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:

```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:

```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:

```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:

- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.

```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.

```
venv/bin/python ./tools/search_engine.py "your search keywords"
```

This will output the search results in the following format:

```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```

If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When using TurboFactory from @ardrive/turbo-sdk, the fileStreamFactory must return a Web API compatible ReadableStream from node:stream/web, not Node.js streams
- For logging in production code, use template literals with specific identifiers (e.g. handle, artistId) to make debugging easier
- When handling image uploads, implement proper fallback mechanisms and clear error messages
- When using LLM for batch processing, use smaller batch sizes (100 instead of 500) to avoid token limits and truncation issues
- Add validation for LLM response structure before parsing JSON to catch malformed responses early
- When processing large datasets with LLMs, reduce concurrency (3 vs 5) to maintain stability
- Include detailed context in error logs for JSON parsing failures (position, nearby content)
- Validate response structure before cleaning/parsing to catch malformed responses early
- Use chunked processing for database queries to handle large datasets efficiently
- Test system changes with varying dataset sizes to ensure scalability
- Log sample data and statistics when processing batches to aid debugging
- Implement progressive validation (structure, content, parsing) to fail fast and provide clear error context
- Always prefix API endpoints with /api for consistency and clarity
- Keep API routes organized by resource type (e.g. /api/agentkit/run, /api/generate)
- Separate data fetching from data processing in API endpoints for better maintainability
- Use appropriate HTTP methods (GET for retrieval, POST for actions/mutations)
- Include request validation middleware for API endpoints
- Add rate limiting for scraping endpoints to prevent abuse
- Only use await with async functions - check if a function is actually async before awaiting it
- When handling agent status updates, make progress parameters optional and handle null agent_status_id gracefully to prevent TypeError exceptions
- Keep agent status tracking separate from data processing functions to maintain better separation of concerns
- Use proper error handling and logging in asynchronous operations to catch and report issues early
- When implementing in-memory caches, always set a reasonable upper bound and implement an eviction strategy (e.g. FIFO) to prevent memory leaks in long-running processes
- When setting up Jest with TypeScript:
  - Place mocks in **mocks** directory adjacent to the mocked module
  - Keep imports clean without .js extensions in TypeScript files
  - Use simpler Jest configurations and remove unnecessary module mappers
  - Be explicit about ESM vs CommonJS choice in the configuration
  - Start with "happy path" tests before adding edge cases
  - Mock external dependencies at the correct level (as close to the source as possible)
- When implementing error status mapping:
  - Use specific error states for different types of failures (e.g. separate setup errors from processing errors)
  - Don't reuse error states across different failure modes
  - Add proper logging context to identify where the error originated
  - Consider the full error flow from origin to final status
  - Handle null/undefined values gracefully in setup phases
  - Add appropriate error states to enum/constants file
  - Document error state transitions and their meanings
- When scraping TikTok profiles, implement anti-bot detection measures including:
  - Add randomized delays between requests to avoid rate limiting
  - Use rotating user agents to prevent pattern detection
  - Implement exponential backoff for failed requests
  - Add proper error handling for TikTok's anti-scraping responses
  - Consider using a proxy rotation service for high-volume scraping
- When using Supabase upsert operations, ensure the onConflict parameter matches an actual unique or exclusion constraint in the database table
- When uploading images to permanent storage like Arweave, implement proper fallback mechanisms to handle upload failures and maintain the original URL as a backup
- When working with database operations, ensure that objects being inserted don't contain fields that don't exist in the database schema to avoid errors like "Could not find the 'X' column in the schema cache"
- When using Supabase upsert operations with ON CONFLICT DO UPDATE, ensure that the data being upserted doesn't contain duplicate values for the conflict column within the same batch, as this will cause the error "ON CONFLICT DO UPDATE command cannot affect row a second time"
- When processing TikTok profile data, ensure that critical fields like profile_url and username are properly populated before attempting database operations, as empty values can cause issues with unique constraints and data integrity
- When scraping social media profiles, create isolated test scripts to verify scraper functionality without running the entire application
- When implementing web scrapers, prefer direct HTTP requests over third-party APIs when possible for better control and reliability
- For social media scraping, implement multiple selectors and patterns to extract data, as the HTML structure can change frequently
- When enhancing social profiles, implement comprehensive logging to track which fields were successfully extracted
- Create separate, focused functions for each platform (Instagram, TikTok, etc.) rather than trying to use a single generic function

# Scratchpad

### Current Task: Implement Bio Extraction for Instagram Profiles

#### Current Status

We've successfully implemented extraction for:

- [x] Avatar URL (from meta tags)
- [x] Follower Count (from meta description)
- [x] Following Count (from meta description)
- [x] Bio (implemented new approach using meta description tag)

We implemented multiple approaches to extract the bio, with the primary method now being extraction from the meta description tag:

```html
<meta
  content="1,484 Followers, 114 Following, 309 Posts - @sweetman.eth on Instagram: "🎨 the dev for onchain music 🎹
📀 helping musicians get paid 📀
🌜 expanding ethereum 🌛""
  name="description"
/>
```

The bio is extracted from the portion after "on Instagram:" and enclosed in quotes. This approach is more reliable than trying to extract from the HTML body, which was failing with our previous implementation.

#### Issue Fixed

During testing, we discovered that our initial regex pattern was too strict and wasn't correctly matching the bio in the meta description. We've fixed this by:

1. Adding the `s` flag to the regex to make it match across multiple lines
2. Creating more flexible patterns as fallbacks
3. Adding a very general pattern that extracts everything after "on Instagram:"
4. Improving the cleanup of extracted text to handle quotes and whitespace properly

#### Implementation Details

We've implemented a multi-layered approach to extract Instagram bios:

1. **Primary Method (New)**: Extract from meta description tag

   - Targets the `<meta name="description">` tag in the HTML head
   - Uses regex to extract the bio portion after "on Instagram:" and between quotes
   - Handles HTML entities like &quot; and &amp;
   - Preserves line breaks in the bio text
   - Now includes multiple fallback patterns with increasing flexibility

2. **Secondary Method**: Extract from og:description meta tag

   - Similar approach to the primary method but using the og:description meta tag
   - Used as a fallback if the primary method fails

3. **Tertiary Methods (Fallbacks)**: Previous HTML-based approaches

   - CSS selector targeting specific classes
   - More general CSS selector approach
   - Regex-based extraction
   - Final fallback for content with line breaks

4. **Error Handling**:
   - Each approach is wrapped in try-catch blocks
   - Detailed logging at each step
   - Graceful degradation through multiple fallback methods

#### Implementation Plan (Completed)

1. [x] **Add CSS Selector-Based Bio Extraction**:

   - [x] Target the specific span elements with classes `_ap3a _aaco _aacu _aacx _aad7 _aade`
   - [x] Extract the text content from these elements
   - [x] Handle nested spans and divs properly
   - [x] Process line breaks (`<br>`) to maintain formatting

2. [x] **Add Regex-Based Fallback**:

   - [x] Create a regex pattern that matches the bio HTML structure
   - [x] Extract the text content between the span tags
   - [x] Handle special characters and HTML entities
   - [x] Process line breaks to maintain formatting

3. [x] **Add Comprehensive Logging**:

   - [x] Log all potential bio elements found
   - [x] Log the extracted bio content
   - [x] Log any errors or issues encountered during extraction
   - [x] Add debug information to help troubleshoot extraction issues

4. [x] **Extract Bio from Meta Description Tag**:

   - [x] Target the meta tag with name="description"
   - [x] Extract the content attribute
   - [x] Parse the bio portion after "on Instagram:" and between quotes
   - [x] Handle HTML entities and special characters
   - [x] Preserve line breaks in the bio

5. [x] **Implement Error Handling and Fallbacks**:

   - [x] Handle cases where the bio element is not found
   - [x] Provide fallbacks for different HTML structures
   - [x] Handle cases where the bio is empty
   - [x] Ensure the scraper doesn't fail if bio extraction fails

6. [x] **Test and Fix Issues**:
   - [x] Test with the 'sweetman.eth' profile
   - [x] Identify and fix issues with regex patterns
   - [x] Add more flexible fallback patterns
   - [x] Improve text cleanup for better results

#### Next Steps

1. [ ] **Test with Additional Profiles**:

   - [ ] Test with profiles that have different bio formats
   - [ ] Test with profiles that have special characters or emojis in bios
   - [ ] Test with profiles that have links in bios
   - [ ] Test with profiles that have very long bios

2. [ ] **Refine Based on Test Results**:

   - [ ] Adjust regex patterns if needed
   - [ ] Optimize the extraction logic based on performance
   - [ ] Consider removing approaches that consistently fail

3. [ ] **Document the Implementation**:

   - [ ] Add comments explaining the extraction strategy
   - [ ] Document the structure of Instagram meta descriptions
   - [ ] Note any limitations or edge cases

4. [ ] **Consider Edge Cases**:
   - [ ] Profiles without bios
   - [ ] Profiles with special characters or emojis in bios
   - [ ] Profiles with links in bios
   - [ ] Profiles with very long bios
