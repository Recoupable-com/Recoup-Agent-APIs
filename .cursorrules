# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:

```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:

```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:

```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:

```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:

- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.

```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.

```
venv/bin/python ./tools/search_engine.py "your search keywords"
```

This will output the search results in the following format:

```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```

If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When using TurboFactory from @ardrive/turbo-sdk, the fileStreamFactory must return a Web API compatible ReadableStream from node:stream/web, not Node.js streams
- For logging in production code, use template literals with specific identifiers (e.g. handle, artistId) to make debugging easier
- When handling image uploads, implement proper fallback mechanisms and clear error messages
- When using LLM for batch processing, use smaller batch sizes (100 instead of 500) to avoid token limits and truncation issues
- Add validation for LLM response structure before parsing JSON to catch malformed responses early
- When processing large datasets with LLMs, reduce concurrency (3 vs 5) to maintain stability
- Include detailed context in error logs for JSON parsing failures (position, nearby content)
- Validate response structure before cleaning/parsing to catch malformed responses early
- Use chunked processing for database queries to handle large datasets efficiently
- Test system changes with varying dataset sizes to ensure scalability
- Log sample data and statistics when processing batches to aid debugging
- Implement progressive validation (structure, content, parsing) to fail fast and provide clear error context
- Always prefix API endpoints with /api for consistency and clarity
- Keep API routes organized by resource type (e.g. /api/agentkit/run, /api/generate)
- Separate data fetching from data processing in API endpoints for better maintainability
- Use appropriate HTTP methods (GET for retrieval, POST for actions/mutations)
- Include request validation middleware for API endpoints
- Add rate limiting for scraping endpoints to prevent abuse
- Only use await with async functions - check if a function is actually async before awaiting it
- When handling agent status updates, make progress parameters optional and handle null agent_status_id gracefully to prevent TypeError exceptions
- Keep agent status tracking separate from data processing functions to maintain better separation of concerns
- Use proper error handling and logging in asynchronous operations to catch and report issues early
- When implementing in-memory caches, always set a reasonable upper bound and implement an eviction strategy (e.g. FIFO) to prevent memory leaks in long-running processes
- When setting up Jest with TypeScript:
  - Place mocks in **mocks** directory adjacent to the mocked module
  - Keep imports clean without .js extensions in TypeScript files
  - Use simpler Jest configurations and remove unnecessary module mappers
  - Be explicit about ESM vs CommonJS choice in the configuration
  - Start with "happy path" tests before adding edge cases
  - Mock external dependencies at the correct level (as close to the source as possible)

# Scratchpad

### Current Task: Fix createOrGetCommentSocials Platform Handling

#### Analysis

1. Current Issue:

   - Complex type transformations happening at multiple levels
   - Platform detection logic duplicated
   - Unnecessary mapping between types

2. Better Solution:

   - Keep platform detection in `createOrGetCommentSocials.ts` only
   - Share types between files
   - Let `savePostComments.ts` pass comments through directly
   - Use database types as source of truth

3. Required Changes:

   - [x] Export CommentInput from savePostComments.ts
   - [x] Update createOrGetCommentSocials.ts:
     - [x] Use CommentInput type
     - [x] Keep platform detection logic here only
     - [x] Reference socials table schema
   - [x] Update savePostComments.ts:
     - [x] Pass comments directly to createOrGetCommentSocials
     - [x] Remove unnecessary mapping
   - [ ] Update AgentService.ts:
     - [ ] Use CommentInput type
     - [ ] Remove platform-related transformations

4. Implementation Complete:

   ```typescript
   // In savePostComments.ts - Simple interface
   export interface CommentInput {
     text: string;
     timestamp: string;
     ownerUsername: string;
     postUrl: string;
   }

   // In createOrGetCommentSocials.ts - Platform detection encapsulated
   function isValidPlatform(platform: string | null): platform is SocialType {
     return platform !== null && platform !== "NONE" && platform !== "APPPLE";
   }
   ```

5. Benefits Achieved:
   - Simpler code flow ✅
   - Single source of truth for types ✅
   - Platform detection in one place ✅
   - Better type safety ✅
   - Easier maintenance ✅

Next Action:

1. Update AgentService.ts to use the simplified CommentInput type

### Current Task: Debug TikTok Comment Storage

#### Analysis

1. Current Status:

   - ✅ Social records are being created correctly
   - ✅ Posts are being scraped and stored
   - ✅ Social_posts associations are working
   - ❌ Post comments are not being stored
   - ✅ Profile URL generation is working

2. Root Cause Found:

   - Comments were being filtered out as invalid because:
     - TikTok API returns comments with `post_id` field
     - Our validation was checking for `post_url` field
     - All 982 comments were being rejected by validation

3. Fix Implemented:

   - [x] Updated ScrapedComment type to include optional post_id field
   - [x] Modified comment validation to accept either post_url or post_id
   - [x] Added mapping to convert post_id to post_url when needed

4. Next Steps:
   - [ ] Test the changes with a new TikTok scrape
   - [ ] Verify comments are being stored in database
   - [ ] Monitor logs for any remaining issues

#### Implementation Progress

1. [x] Add logging to TikTokScraper:

   - [x] Add debug logs in scrapeComments
   - [x] Add validation checks for comment data
   - [x] Add detailed logging of validation results

2. [x] Add logging to getVideoComments:

   - [x] Log API responses
   - [x] Log data transformation steps
   - [x] Add error context

3. [x] Fix comment validation:

   - [x] Update ScrapedComment type
   - [x] Modify validation logic
   - [x] Add post_id to post_url mapping

4. [ ] Test and verify:
   - [ ] Run scraper with test account
   - [ ] Check logs at each step
   - [ ] Verify database state

Next Action:
Run a test scrape to verify the fix works and comments are now being stored correctly.

### Previous Task: Fix Hardcoded Profile URL in PilotController

#### Analysis

1. Current Issue:

   - In `PilotController.ts`, profile_url is hardcoded to Instagram format: `https://instagram.com/${handle}`
   - This is incorrect for other platforms like TikTok, Twitter, etc.
   - Each platform has its own URL format:
     - Instagram: `https://instagram.com/${handle}`
     - TikTok: `https://tiktok.com/@${handle}`
     - Twitter: `https://x.com/${handle}`
     - Spotify: `https://open.spotify.com/artist/${handle}`

2. Required Changes:
   - ✅ Create a new lib function to generate platform-specific profile URLs
   - ✅ Update PilotController to use this function
   - ✅ Ensure consistent URL generation across the codebase

#### Implementation Plan

1. [x] Create new lib function:

   - [x] Create `lib/utils/getProfileUrl.ts`
   - [x] Implement URL generation for all platforms
   - [x] Add proper typing and error handling

2. [x] Update PilotController:

   - [x] Import new getProfileUrl function
   - [x] Replace hardcoded URL with dynamic generation
   - [x] Update error handling

3. [ ] Test changes:

   - [ ] Verify URL generation for each platform
   - [ ] Test with various handle formats
   - [ ] Ensure backward compatibility

4. [x] Documentation:
   - [x] Add JSDoc comments to new function
   - [x] Update any relevant documentation

Next Steps:

1. Add test cases for the new getProfileUrl function
2. Test the changes in the PilotController with different platforms

Note: After this task, we'll continue with the TikTok scraper architecture update.

### Previous Task: Remove Problematic Progress Updates in TikTok Scraper

#### Analysis of Progress Update Points

1. Files Modified:

   - `lib/tiktok/getVideoComments.ts`: ✅ Removed progress updates and agent_status_id parameter
   - `lib/scraping/platforms/tiktok/TikTokScraper.ts`: ✅ Updated to call getVideoComments without agent_status_id
   - `agents/runTikTokAgent.ts`: ✅ Deleted as it's no longer used (replaced by TikTokScraper)

2. Changes Made:
   - Removed updateAgentStatus import and calls
   - Removed agent_status_id parameter from getVideoComments
   - Updated TikTokScraper to match new function signature
   - Kept core comment fetching logic intact
   - Deleted unused runTikTokAgent.ts file

#### Next Steps

1. [x] Remove progress updates from getVideoComments.ts:

   - [x] Remove updateAgentStatus import
   - [x] Remove all progress update calls
   - [x] Keep only the core comment fetching logic

2. [x] Simplify TikTokScraper.ts:

   - [x] Update getVideoComments call to remove agent_status_id parameter

3. [x] Clean up old code:

   - [x] Delete unused runTikTokAgent.ts

4. [ ] Test changes:
   - [ ] Verify scraping still works
   - [ ] Confirm no more "Cannot read properties of null" errors
   - [ ] Check final status updates still work

Note: The final status updates in PilotController (FINISHED, ERROR states) remain unchanged since they work correctly.

### Previous Task: Step 34 - API - create_report - segmentId - one param

Task Description:
Update the new report API endpoint to only require a single parameter (segmentId) instead of both artistId and segmentName.

#### Progress

1. [x] Review current implementation
2. [x] Design changes
3. [x] Create Supabase query functions
4. [x] Implementation
5. [x] Fix Email Lookup Logic
6. [x] Update getArtistSegmentComments
   - [x] Modify function signature
   - [x] Update getFansBySegment
   - [x] Update error handling and logging

#### New Issue: Handle No Comments Case

Problem:

- App crashes when no comments are found for a segment
- Current behavior stops the entire app process when a report fails
- Need to handle report failure gracefully without crashing

Root Cause:

1. Unhandled error in async report generation process
2. Error propagates up and crashes the Node process
3. No try-catch around async report generation

Design Decision:

- Keep early response for better UX (non-blocking)
- Let report generation continue asynchronously
- Handle failures gracefully without crashing app

Action Items:

1. [x] Update error handling in async report generation:
   - [x] Add try-catch around report generation logic
   - [x] Log errors appropriately
   - [x] Allow process to continue even if report fails
2. [ ] Add test cases:
   - [ ] Test empty comments scenario
   - [ ] Verify app continues running after report failure

Next Steps:

1. Add test cases to verify error handling
2. Test the complete flow

### Current Task: Debug TypeScript Error in AgentService

#### Analysis

1. Error Location:

   - File: `lib/services/AgentService.ts`
   - Line: 91
   - Error: Missing required `platform` field in comment object

2. Error Details:

   ```typescript
   Argument of type '{ text: string; timestamp: string; ownerUsername: string; postUrl: string; }[]'
   is not assignable to parameter of type 'CommentInput[]'.
   Property 'platform' is missing in type '{ text: string; timestamp: string; ownerUsername: string; postUrl: string; }'
   ```

3. Root Cause:

   - `savePostComments` requires `platform` in `CommentInput` interface
   - `AgentService.storeComments` is not providing the platform field
   - Looking at `ScrapedComment` type, we have:
     - `post_url` which can be used to extract platform
     - `profile_url` which can also be used to extract platform
   - We can use either URL to determine the platform

4. Solution:
   - Use `getSocialPlatformByLink` to extract platform from either:
     - `comment.post_url` (primary)
     - `comment.profile_url` (fallback)
   - Add platform field to comment mapping in `storeComments`
   - Keep backward compatibility by using URL-based platform detection

#### Implementation Plan

1. [ ] Update AgentService.storeComments:

   - [ ] Import getSocialPlatformByLink
   - [ ] Extract platform from post_url or profile_url
   - [ ] Add platform field to comment mapping
   - [ ] Add error handling for invalid URLs

2. [ ] Test Changes:
   - [ ] Verify TypeScript compilation succeeds
   - [ ] Test with different platforms
   - [ ] Ensure backward compatibility

Next Action:

1. Update AgentService.storeComments implementation
2. Add platform extraction logic
