# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:

```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:

```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:

```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:

```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:

- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.

```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.

```
venv/bin/python ./tools/search_engine.py "your search keywords"
```

This will output the search results in the following format:

```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```

If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When using TurboFactory from @ardrive/turbo-sdk, the fileStreamFactory must return a Web API compatible ReadableStream from node:stream/web, not Node.js streams
- For logging in production code, use template literals with specific identifiers (e.g. handle, artistId) to make debugging easier
- When handling image uploads, implement proper fallback mechanisms and clear error messages

# Scratchpad

## Current Task: Consolidate Group Segments Instructions - RESOLVED ✅

### Task Description

Consolidate redundant instructions `group_segments` and `group_segments_format` in `instructions.ts` into a single comprehensive instruction.

### Analysis

Original structure:

1. `group_segments`: Task description + format + example
2. `group_segments_format`: Format requirements + note about response format

Issues:

- Redundant format specifications
- Split instructions that should be together
- Unnecessary complexity in instruction management

### Progress

[X] Analyze differences between instructions:

- [x] Identify unique components
- [x] Determine essential elements
- [x] Plan consolidated format

[X] Update `instructions.ts`:

- [x] Merge instructions into `group_segments`
- [x] Remove `group_segments_format`
- [x] Maintain all important information

[X] Update `groupFansBySegment.ts`:

- [x] Remove reference to `group_segments_format`
- [x] Use consolidated instruction
- [x] Maintain functionality

### Changes Made

1. Consolidated instructions:

   - Combined task description, format requirements, and example
   - Added explicit note about response format
   - Maintained clear structure and readability

2. Updated code:
   - Removed redundant instruction
   - Simplified instruction usage
   - Maintained existing functionality

### Results

✅ Reduced instruction redundancy
✅ Improved instruction clarity
✅ Simplified code
✅ Maintained all functionality

### Lessons Learned

1. Keep instructions consolidated when they serve the same purpose
2. Include all necessary information in a single, clear instruction
3. Avoid splitting related requirements across multiple instructions

### Next Steps

The consolidation is complete and the code is working as expected. No further changes needed at this time.

## Previous Task: Move Group Segments Format Instruction - RESOLVED ✅

### Task Description

Move the format instruction text from `groupFansBySegment.ts` to `instructions.ts` to maintain consistency and centralize all instruction text.

### Progress

[X] Add new instruction to `instructions.ts`:

- [x] Add `group_segments_format` instruction
- [x] Maintain exact format requirements
- [x] Keep clear documentation

[X] Update `groupFansBySegment.ts`:

- [x] Remove inline instruction text
- [x] Use new instruction from `instructions.ts`
- [x] Maintain functionality

### Changes Made

1. Added to `instructions.ts`:

   - New `group_segments_format` instruction
   - Clear format requirements
   - Consistent with existing instructions

2. Updated `groupFansBySegment.ts`:
   - Removed inline instruction text
   - Using imported instruction
   - Combined with existing `group_segments` instruction

### Results

✅ Successfully moved instruction text to central location
✅ Maintained exact format requirements
✅ Improved code organization
✅ Better maintainability

### Lessons Learned

1. Keep all instruction text in a central location
2. Maintain clear format requirements in instructions
3. Combine related instructions when appropriate

### Next Steps

The instruction move is complete and the code is working as expected. No further changes needed at this time.

## Previous Task: Optimize Social Posts Queries - RESOLVED ✅

### Task Description

Optimize redundant queries between `getSocialPosts` and `getSocialPostsDetails` by consolidating them into a single, efficient query.

### Analysis

Current flow:

1. `getSocialPosts`: Queries `social_posts` for `post_id` only
2. `getSocialPostsDetails`: Queries same table again for `post_id` and `social_id`

Issues:

- Redundant database queries
- Unnecessary data fetching
- Extra network calls

### Progress

[X] Update `getSocialPosts`:

- [x] Modify query to select both `post_id` and `social_id`
- [x] Add chunked processing for large queries
- [x] Update return type and interface
- [x] Update logging messages

[X] Update `segmentService.ts`:

- [x] Remove `getSocialPostsDetails` import
- [x] Use enhanced `getSocialPosts` result directly
- [x] Update post-to-artist mapping logic

[X] Clean up:

- [x] Remove `getSocialPostsDetails.ts` file
- [x] Update relevant code structure

### Changes Made

1. Enhanced `getSocialPosts`:

   - Added `SocialPost` interface
   - Implemented chunked processing
   - Included both `post_id` and `social_id` in query
   - Improved error handling and logging

2. Updated `segmentService.ts`:

   - Removed redundant query
   - Simplified data flow
   - Maintained existing functionality

3. Cleanup:
   - Removed redundant file
   - Improved code organization

### Results

✅ Reduced database queries from 2 to 1
✅ Maintained all functionality
✅ Improved performance through chunked processing
✅ Cleaner code structure
✅ Better error handling

### Lessons Learned

1. Always look for opportunities to consolidate database queries
2. Use chunked processing for large datasets
3. Keep interfaces consistent across related operations
4. Maintain detailed logging for debugging

### Next Steps

The optimization is complete and the code is working as expected. No further changes needed at this time.

### Previous Task: Refactor Supabase Queries - RESOLVED ✅

### Task Description

Move Supabase queries from `segmentService.ts` into separate files in the `lib/supabase` directory, following the single responsibility principle.

### Progress

[X] Create new Supabase query files:

- [x] `getAccountSocials.ts` for fetching account socials
- [x] `getSocialPosts.ts` for fetching social posts
- [x] `getPostComments.ts` for fetching post comments
- [x] `getSocialPostsDetails.ts` for fetching detailed social posts data
      [X] Update `segmentService.ts` to use the new query files
      [X] Maintain all existing functionality and logging
      [X] Test the refactored code

### Changes Made

1. Created new Supabase query files:

   - Each file handles a single database operation
   - Consistent error handling and logging
   - Clear interfaces for data types
   - Chunked processing for large queries

2. Updated `segmentService.ts`:
   - Removed direct Supabase queries
   - Added imports for new query files
   - Simplified code structure
   - Maintained existing functionality

### Results

✅ Successfully separated Supabase queries into standalone files
✅ Each file follows single responsibility principle
✅ Improved code organization and maintainability
✅ Consistent error handling and logging across files
✅ Better separation of concerns

### Lessons Learned

1. Keep database queries in dedicated files
2. Use consistent logging patterns across files
3. Handle chunked processing for large queries
4. Use TypeScript interfaces for data types
5. Maintain clear error messages

### Next Steps

The refactoring is complete and the code is working as expected. No further changes needed at this time.
