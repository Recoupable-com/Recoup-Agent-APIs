# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:

```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:

```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:

```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:

```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:

- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.

```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.

```
venv/bin/python ./tools/search_engine.py "your search keywords"
```

This will output the search results in the following format:

```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```

If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When using TurboFactory from @ardrive/turbo-sdk, the fileStreamFactory must return a Web API compatible ReadableStream from node:stream/web, not Node.js streams
- For logging in production code, use template literals with specific identifiers (e.g. handle, artistId) to make debugging easier
- When handling image uploads, implement proper fallback mechanisms and clear error messages
- When using LLM for batch processing, use smaller batch sizes (100 instead of 500) to avoid token limits and truncation issues
- Add validation for LLM response structure before parsing JSON to catch malformed responses early
- When processing large datasets with LLMs, reduce concurrency (3 vs 5) to maintain stability
- Include detailed context in error logs for JSON parsing failures (position, nearby content)
- Validate response structure before cleaning/parsing to catch malformed responses early
- Use chunked processing for database queries to handle large datasets efficiently
- Test system changes with varying dataset sizes to ensure scalability
- Log sample data and statistics when processing batches to aid debugging
- Implement progressive validation (structure, content, parsing) to fail fast and provide clear error context
- Always prefix API endpoints with /api for consistency and clarity
- Keep API routes organized by resource type (e.g. /api/agentkit/run, /api/generate)
- Separate data fetching from data processing in API endpoints for better maintainability
- Use appropriate HTTP methods (GET for retrieval, POST for actions/mutations)
- Include request validation middleware for API endpoints
- Add rate limiting for scraping endpoints to prevent abuse
- Only use await with async functions - check if a function is actually async before awaiting it
- When handling agent status updates, make progress parameters optional and handle null agent_status_id gracefully to prevent TypeError exceptions
- Keep agent status tracking separate from data processing functions to maintain better separation of concerns
- Use proper error handling and logging in asynchronous operations to catch and report issues early
- When implementing in-memory caches, always set a reasonable upper bound and implement an eviction strategy (e.g. FIFO) to prevent memory leaks in long-running processes
- When setting up Jest with TypeScript:
  - Place mocks in **mocks** directory adjacent to the mocked module
  - Keep imports clean without .js extensions in TypeScript files
  - Use simpler Jest configurations and remove unnecessary module mappers
  - Be explicit about ESM vs CommonJS choice in the configuration
  - Start with "happy path" tests before adding edge cases
  - Mock external dependencies at the correct level (as close to the source as possible)
- When implementing error status mapping:
  - Use specific error states for different types of failures (e.g. separate setup errors from processing errors)
  - Don't reuse error states across different failure modes
  - Add proper logging context to identify where the error originated
  - Consider the full error flow from origin to final status
  - Handle null/undefined values gracefully in setup phases
  - Add appropriate error states to enum/constants file
  - Document error state transitions and their meanings
- When scraping TikTok profiles, implement anti-bot detection measures including:
  - Add randomized delays between requests to avoid rate limiting
  - Use rotating user agents to prevent pattern detection
  - Implement exponential backoff for failed requests
  - Add proper error handling for TikTok's anti-scraping responses
  - Consider using a proxy rotation service for high-volume scraping
- When using Supabase upsert operations, ensure the onConflict parameter matches an actual unique or exclusion constraint in the database table
- When uploading images to permanent storage like Arweave, implement proper fallback mechanisms to handle upload failures and maintain the original URL as a backup
- When working with database operations, ensure that objects being inserted don't contain fields that don't exist in the database schema to avoid errors like "Could not find the 'X' column in the schema cache"
- When using Supabase upsert operations with ON CONFLICT DO UPDATE, ensure that the data being upserted doesn't contain duplicate values for the conflict column within the same batch, as this will cause the error "ON CONFLICT DO UPDATE command cannot affect row a second time"

# Scratchpad

### Current Task: Fix Duplicate Conflict Error in Socials Table Upsert Operation

#### Error Analysis

1. **Core Error**:

   ```
   Failed to create/update socials: {
     code: '21000',
     details: null,
     hint: 'Ensure that no rows proposed for insertion within the same command have duplicate constrained values.',
     message: 'ON CONFLICT DO UPDATE command cannot affect row a second time'
   }
   ```

2. **Root Cause**:

   - The error code `21000` indicates a PostgreSQL error related to duplicate values in an upsert operation
   - The hint "Ensure that no rows proposed for insertion within the same command have duplicate constrained values" suggests that we're trying to upsert multiple records with the same `profile_url` value in a single batch
   - The message "ON CONFLICT DO UPDATE command cannot affect row a second time" confirms that PostgreSQL is detecting that the same row would be updated multiple times in a single upsert operation

3. **Error Flow**:
   - `enhanceTikTokProfiles` function returns enhanced profiles
   - These profiles are passed to `createSocials`
   - The batch of profiles contains duplicate `profile_url` values
   - When `createSocials` attempts to upsert the batch, PostgreSQL rejects the operation because it would update the same row multiple times

#### Solution Plan

The smallest set of changes needed to fix this issue:

1. **Option A: De-duplicate profiles before upserting**

   - Pros: Simple to implement, doesn't require changing the database operation
   - Cons: Might lose data if there are legitimate duplicates with different data

2. **Option B: Split the upsert into individual operations**

   - Pros: Most reliable, handles all edge cases
   - Cons: Less efficient, requires more database calls

3. **Option C: Group by profile_url and only keep the latest/most complete record**
   - Pros: Balance of efficiency and reliability
   - Cons: More complex implementation

#### Implementation Plan (Option A - simplest)

1. [x] Add logging to understand the duplicate profiles

   - Log the profile_url values before upserting to identify duplicates
   - Check if the duplicates are identical or have different data

2. [x] Update `createSocials.ts` to de-duplicate profiles before upserting

   - Use a Map with profile_url as the key to ensure uniqueness
   - Or filter the array to remove duplicates

3. [ ] Test the changes
   - Verify that TikTok profiles can be successfully saved to the database
   - Confirm that no duplicates are being sent to the database

#### Code Changes

For `createSocials.ts`:

```typescript
// De-duplicate authors by profile_url to avoid PostgreSQL error:
// "ON CONFLICT DO UPDATE command cannot affect row a second time"
const uniqueAuthors = Array.from(
  new Map(cleanAuthors.map((author) => [author.profile_url, author])).values()
);

console.log(
  `De-duplicated ${cleanAuthors.length - uniqueAuthors.length} authors`
);

// Use uniqueAuthors instead of cleanAuthors in the upsert operation
```

### Previous Task: Fix Database Error with 'error' Field in Socials Table

#### Error Analysis

1. **Core Error**:

   ```
   Failed to create/update socials: {
     code: 'PGRST204',
     details: null,
     hint: null,
     message: "Could not find the 'error' column of 'socials' in the schema cache"
   }
   ```

2. **Root Cause**:

   - The enhanced TikTok profiles contain an `error` field that is being passed to the database
   - The `socials` table does not have an `error` column
   - When the code attempts to insert/upsert these objects, PostgreSQL rejects them because it can't find the 'error' column

3. **Error Flow**:
   - `enhanceTikTokProfiles` function returns enhanced profiles that may contain an `error` field
   - These profiles are passed to `createSocials` or `createSocial`
   - The database operation fails because the `error` field doesn't exist in the table

#### Solution Plan

The smallest set of changes needed to fix this issue:

1. **Option A: Filter out the `error` field in `enhanceTikTokProfiles`**

   - Pros: Fixes the issue at the source
   - Cons: Requires modifying the TikTok-specific code

2. **Option B: Filter out the `error` field in `createSocials` and `createSocial`**

   - Pros: More general solution that would work for all sources
   - Cons: Requires modifying multiple files

3. **Option C: Type the input parameters more strictly**
   - Pros: Would catch these issues at compile time
   - Cons: More extensive changes required

#### Implementation Plan (Option B - most targeted)

1. [x] Identify where the `error` field is being added to the profiles

   - Found in `enhanceTikTokProfiles` function

2. [x] Update `createSocials.ts` to filter out the `error` field

   - Remove the `error` field from each author object before passing to Supabase
   - Use object destructuring to cleanly separate the `error` field from the rest of the data

3. [x] Update `enhanceAuthorsWithAvatar.ts` to fix type errors

   - Add missing `id` and `updated_at` fields to the mapped TikTok authors
   - Use type assertion to avoid TypeScript errors

4. [x] Test the changes
   - Verify that TikTok profiles can be successfully saved to the database
   - Confirm that Arweave uploads work correctly

#### Code Changes

For `createSocials.ts`:

```typescript
// Clean the authors array to remove any error fields
const cleanAuthors = authors.map((author) => {
  // Use destructuring to remove error field if it exists
  const { error, ...cleanAuthor } = author as any;
  return cleanAuthor;
});

// Use cleanAuthors instead of authors in the upsert operation
```

For `enhanceAuthorsWithAvatar.ts`:

```typescript
const mappedTikTokAuthors = enhancedProfiles.map((profile, index) => ({
  // Preserve original id and updated_at fields
  id: tiktokAuthors[index]?.id,
  updated_at: tiktokAuthors[index]?.updated_at,
  // Add enhanced profile data
  avatar: profile.avatar,
  bio: profile.bio,
  followerCount: profile.followerCount,
  followingCount: profile.followingCount,
  profile_url: profile.profile_url,
  region: profile.region,
  username: profile.username,
}));
```

### Current Task: Implement Arweave Uploads for TikTok Profile Pictures

#### Task Analysis

1. **Current Issue**:

   - TikTok profile pictures are currently being saved with their original URLs
   - These URLs may have caching issues or expire over time
   - We need to upload these images to Arweave for permanent storage

2. **Required Changes**:
   - Integrate the existing `uploadPfpToArweave.ts` function with the TikTok profile scraping process
   - Update the `enhanceSocialData.ts` file to upload avatar images to Arweave
   - Add fallback to original URLs if Arweave upload fails
   - Track and report Arweave upload statistics

#### Implementation Plan

1. [x] Update `enhanceSocialData.ts` to:

   - Import the `uploadPfpToArweave` function
   - Add Arweave upload logic for avatar URLs
   - Implement fallback to original URLs if upload fails
   - Add tracking for successful Arweave uploads
   - Update statistics reporting to include Arweave uploads

2. [ ] Test the implementation with real TikTok profiles

   - Verify that avatars are successfully uploaded to Arweave
   - Confirm that the Arweave URLs are correctly saved to the database
   - Check that fallback to original URLs works when needed

3. [ ] Consider batch processing for existing profiles
   - Create a script to find profiles with original TikTok avatar URLs
   - Upload these to Arweave and update the database records

#### Previous Task: Add followingCount to TikTok Profile Scraping

#### Task Analysis

1. **Current Issue**:

   - The TikTok profile scraping is currently saving `avatar`, `followerCount`, and `bio` to the socials table
   - The `followingCount` field is defined in the database schema but not being populated

2. **Required Changes**:
   - Update `getTikTokProfile.ts` to extract the following count from TikTok profiles
   - Update `enhanceSocialData.ts` to process and save the following count to the socials record

#### Implementation Plan

1. [x] Update `getTikTokProfile.ts` to:

   - Add `followingCount` to the `TikTokProfileResult` interface
   - Add selectors to extract following count from HTML
   - Add patterns to extract following count from script tags
   - Update logging to include following count information

2. [x] Update `enhanceSocialData.ts` to:
   - Process the `followingCount` returned from `getTikTokProfile`
   - Add `followingCount` to the enhanced profile object
   - Update statistics tracking to include following count
   - Update logging to include following count information

#### Previous Task: Fix ON CONFLICT Error in Socials Table Upsert Operation

1. **Current Error**:

   ```
   Failed to create/update socials: {
     code: '42P10',
     details: null,
     hint: null,
     message: 'there is no unique or exclusion constraint matching the ON CONFLICT specification'
   }
   ```

2. **Root Cause**:

   - The error code `42P10` indicates a PostgreSQL error related to the ON CONFLICT clause
   - The current code in `createSocials.ts` is using `onConflict: "username, profile_url"`
   - This suggests we're trying to upsert based on a composite unique constraint on `username` and `profile_url`
   - However, the error message indicates that this constraint doesn't exist in the database

3. **Current Implementation**:

   ```typescript
   const { data: upsertedSocials, error: upsertError } = await supabase
     .from("socials")
     .upsert(authors, {
       onConflict: "username, profile_url",
       ignoreDuplicates: false, // Update existing records
     })
     .select("id, username");
   ```

4. **Database Schema Analysis**:

   From the migration file for the socials table:

   ```sql
   CREATE UNIQUE INDEX socials_pkey ON public.socials USING btree (id);
   CREATE UNIQUE INDEX socials_profile_url_key ON public.socials USING btree (profile_url);

   alter table "public"."socials" add constraint "socials_pkey" PRIMARY KEY using index "socials_pkey";
   alter table "public"."socials" add constraint "socials_profile_url_key" UNIQUE using index "socials_profile_url_key";
   ```

   Key findings:

   - The socials table has a PRIMARY KEY constraint on the `id` column
   - The socials table has a UNIQUE constraint on the `profile_url` column
   - There is NO composite unique constraint on `username, profile_url`
   - The `username` column is NOT part of any unique constraint

#### Solution

Based on the database schema, we need to update the `createSocials.ts` file to use the correct unique constraint for the ON CONFLICT clause. The correct constraint to use is `profile_url` since that's the only unique constraint available besides the primary key.

```typescript
const { data: upsertedSocials, error: upsertError } = await supabase
  .from("socials")
  .upsert(authors, {
    onConflict: "profile_url", // Changed from "username, profile_url" to match the actual unique constraint
    ignoreDuplicates: false, // Update existing records
  })
  .select("id, username");
```

#### Action Plan

1. [x] Identify the actual unique constraints in the socials table

   - Found that there's a unique constraint on `profile_url` but not on the combination of `username, profile_url`

2. [x] Determine the correct constraint to use

   - Should use `onConflict: "profile_url"` instead of `onConflict: "username, profile_url"`

3. [x] Update the `createSocials.ts` file to use the correct constraint

   - Changed the onConflict parameter to "profile_url"
   - Added a comment explaining the constraint usage

4. [x] Test the fix to ensure it resolves the error

   - Run the code that was previously failing to confirm the fix works

5. [x] Update documentation to reflect the correct constraint usage
   - Added comments in the code to explain the constraint usage
